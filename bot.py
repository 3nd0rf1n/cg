import asyncio
import datetime
import logging
import os
import requests
from collections import defaultdict
from telegram import Bot
from telegram.ext import Application
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiohttp import web
import nest_asyncio

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))

bot = Bot(token=BOT_TOKEN)
command_usage = defaultdict(lambda: [None, 0])
last_alert_status = None

async def send_startup_notification():
    message = (
        "üá∫üá¶ *–®–∞–Ω–æ–≤–Ω—ñ –º–µ—à–∫–∞–Ω—Ü—ñ –ß–µ—Ä–≤–æ–Ω–æ–≥—Ä–∞–¥–∞ —Ç–∞ –®–µ–ø—Ç–∏—Ü—å–∫–æ–≥–æ!*\n\n"
        "–†–∞–¥—ñ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏, —â–æ –Ω–∞—à Telegram-–±–æ—Ç –ø—Ä–∞—Ü—é—î –¥–ª—è –≤–∞—Å —Ü—ñ–ª–æ–¥–æ–±–æ–≤–æ —Ç–∞ –¥–æ–ø–æ–º–∞–≥–∞—î –±—É—Ç–∏ –≤ –∫—É—Ä—Å—ñ –≤–∞–∂–ª–∏–≤–∏—Ö –ø–æ–¥—ñ–π.\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üîî *–û—Å–Ω–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞:*\n"
        "‚Ä¢ üõë –û–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≤—ñ—Ç—Ä—è–Ω—É —Ç—Ä–∏–≤–æ–≥—É —É –õ—å–≤—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ\n"
        "‚Ä¢ üïØÔ∏è –©–æ–¥–µ–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –æ 09:00 ‚Äî –í—Å–µ—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Ö–≤–∏–ª–∏–Ω–∞ –º–æ–≤—á–∞–Ω–Ω—è\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ /rozklad —Ç–∏–º—á–∞—Å–æ–≤–æ –±—É–ª–∞ –≤–∏–¥–∞–ª–µ–Ω–∞ –∑ —Ü—å–æ–≥–æ –±–æ—Ç–∞.\n"
        "‚ö†Ô∏è –ù–µ–∑–∞–±–∞—Ä–æ–º –≤–æ–Ω–∞ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –±–æ—Ç—ñ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º.\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üí° *–ü–æ—Ä–∞–¥–∞:*\n"
        "–ù–∞–ø–∏—à—ñ—Ç—å –±–æ—Ç—É –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –æ—Å–æ–±–∏—Å—Ç—ñ, —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "–ó –ø–æ–≤–∞–≥–æ—é,\n"
        "*–í–∞—à –ø–æ–º—ñ—á–Ω–∏–∫ –∑ –±–µ–∑–ø–µ–∫–∏ —Ç–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É üíôüíõ*"
    )
    await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="Markdown")

async def send_minute_of_silence():
    now = datetime.datetime.now()
    invasion_start = datetime.datetime(2022, 2, 24)
    days_since_invasion = (now - invasion_start).days + 1
    crimea_occupation_start = datetime.datetime(2014, 2, 20)
    days_since_crimea = (now - crimea_occupation_start).days + 1
    message = (
        f"üïØÔ∏è {now.strftime('%d.%m.%Y')} –æ 09:00 ‚Äî –í—Å–µ—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Ö–≤–∏–ª–∏–Ω–∞ –º–æ–≤—á–∞–Ω–Ω—è.\n\n"
        f"–£ —Ü–µ–π —á–∞—Å –≤—à–∞–Ω–æ–≤—É—î–º–æ –ø–∞–º º—è—Ç—å —É—Å—ñ—Ö –≥—Ä–æ–º–∞–¥—è–Ω –£–∫—Ä–∞—ó–Ω–∏ ‚Äî –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤ —Ç–∞ —Ü–∏–≤—ñ–ª—å–Ω–∏—Ö, —è–∫—ñ —Ç—Ä–∞–≥—ñ—á–Ω–æ –∑–∞–≥–∏–Ω—É–ª–∏ "
        f"–≤–Ω–∞—Å–ª—ñ–¥–æ–∫ –∑–±—Ä–æ–π–Ω–æ—ó –∞–≥—Ä–µ—Å—ñ—ó –†–æ—Å—ñ–π—Å—å–∫–æ—ó –§–µ–¥–µ—Ä–∞—Ü—ñ—ó –ø—Ä–æ—Ç–∏ –£–∫—Ä–∞—ó–Ω–∏.\n\n"
        f"–°–≤—ñ—Ç–ª–∞ –ø–∞–º º—è—Ç—å –ø–æ–ª–µ–≥–ª–∏–º. –ß–µ—Å—Ç—å —ñ —Å–ª–∞–≤–∞ –ì–µ—Ä–æ—è–º! üá∫üá¶\n\n"
        f"üìÖ –°—å–æ–≥–æ–¥–Ω—ñ ‚Äî {days_since_invasion}-–π –¥–µ–Ω—å –≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É –ø–æ–≤–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ –≤—Ç–æ—Ä–≥–Ω–µ–Ω–Ω—è.\n"
        f"üìÖ –ú–∏–Ω—É–ª–æ {days_since_crimea} –¥–Ω—ñ–≤ –∑ –º–æ–º–µ–Ω—Ç—É –ø–æ—á–∞—Ç–∫—É —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –æ–∫—É–ø–∞—Ü—ñ—ó –ê–≤—Ç–æ–Ω–æ–º–Ω–æ—ó –†–µ—Å–ø—É–±–ª—ñ–∫–∏ –ö—Ä–∏–º."
    )
    await bot.send_message(chat_id=CHAT_ID, text=message)

async def check_air_alerts():
    global last_alert_status
    try:
        r = requests.get("https://alerts.com.ua/api/states", timeout=10)
        if r.status_code == 200:
            states = r.json().get("states", [])
            lviv = next((r for r in states if r["id"] == 12), None)
            if lviv:
                status = lviv.get("alert", False)
                if last_alert_status != status:
                    last_alert_status = status
                    if status:
                        text = (
                            "üö® *–£–≤–∞–≥–∞! –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ —É –õ—å–≤—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ!*\n\n"
                            "üî¥ –ó–∞–ª–∏—à–∞–π—Ç–µ—Å—å —É –±–µ–∑–ø–µ—á–Ω–æ–º—É –º—ñ—Å—Ü—ñ –∞–±–æ –Ω–µ–≥–∞–π–Ω–æ –ø—Ä—è–º—É–π—Ç–µ –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ —É–∫—Ä–∏—Ç—Ç—è.\n"
                            "‚ùó –î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å –ø—Ä–∞–≤–∏–ª –±–µ–∑–ø–µ–∫–∏, –Ω–µ —ñ–≥–Ω–æ—Ä—É–π—Ç–µ —Å–∏–≥–Ω–∞–ª–∏ —Ç—Ä–∏–≤–æ–≥–∏.\n"
                            "üì¢ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–∏—Ç—É–∞—Ü—ñ—é —É—Ç–æ—á–Ω—é–π—Ç–µ –≤ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª–∞—Ö.\n\n"
                            "–†–∞–∑–æ–º –≤–∏—Å—Ç–æ—ó–º–æ. –°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ! üá∫üá¶"
                        )
                    else:
                        text = (
                            "‚úÖ *–í—ñ–¥–±—ñ–π –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ —É –õ—å–≤—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ!*\n\n"
                            "‚òÄÔ∏è –ù–∞—Ä–∞–∑—ñ –∑–∞–≥—Ä–æ–∑–∞ –∑ –ø–æ–≤—ñ—Ç—Ä—è –≤—ñ–¥—Å—É—Ç–Ω—è. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –∑–≤–∏—á–Ω–∏—Ö —Å–ø—Ä–∞–≤.\n"
                            "üôè –î—è–∫—É—î–º–æ –≤—Å—ñ–º –∑–∞ –ø–∏–ª—å–Ω—ñ—Å—Ç—å, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ –¥–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –±–µ–∑–ø–µ–∫–∏.\n\n"
                            "–†–∞–∑–æ–º –¥–æ –ø–µ—Ä–µ–º–æ–≥–∏! üíôüíõ"
                        )
                    await bot.send_message(chat_id=CHAT_ID, text=text, parse_mode='Markdown')
    except Exception as e:
        logging.error(f"[–ü–û–ú–ò–õ–ö–ê] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–∏–≤–æ–≥–∏: {e}", exc_info=True)

async def handle(request):
    return web.Response(text="Bot is running")

async def start_web():
    app = web.Application()
    app.add_routes([web.get('/', handle)])
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.getenv("PORT", 8000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    while True:
        await asyncio.sleep(3600)

async def main():
    logging.basicConfig(level=logging.INFO)
    scheduler = AsyncIOScheduler(timezone="Europe/Kyiv")
    scheduler.add_job(send_minute_of_silence, 'cron', hour=9, minute=0)
    scheduler.add_job(check_air_alerts, 'interval', seconds=60)
    scheduler.start()

    application = Application.builder().token(BOT_TOKEN).build()

    asyncio.create_task(start_web())
    asyncio.create_task(send_startup_notification())

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    await application.run_polling()

if __name__ == '__main__':
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())
