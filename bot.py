import asyncio
import datetime
import logging
import os
import requests
from telegram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler

BOT_TOKEN = os.getenv("BOT_TOKEN", "7450692138:AAHiERBibay9XI56FhpSwFFclfKZmZNWoVM")
CHAT_ID = int(os.getenv("CHAT_ID", "-4811736259"))  

bot = Bot(token=BOT_TOKEN)
last_alert_status = None

async def send_minute_of_silence():
    now = datetime.datetime.now()

    invasion_start = datetime.datetime(2022, 2, 24)
    days_since_invasion = (now - invasion_start).days + 1

    crimea_occupation_start = datetime.datetime(2014, 2, 20)
    days_since_crimea = (now - crimea_occupation_start).days + 1

    message = (
        f"üïØÔ∏è {now.strftime('%d.%m.%Y')} ‚Äî –í—Å–µ—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Ö–≤–∏–ª–∏–Ω–∞ –º–æ–≤—á–∞–Ω–Ω—è.\n\n"
        f"–°—Ö–∏–ª—è—î–º–æ –≥–æ–ª–æ–≤–∏ –ø–µ—Ä–µ–¥ –ø–∞–º º—è—Ç—Ç—é —É—Å—ñ—Ö —É–∫—Ä–∞—ó–Ω—Ü—ñ–≤ ‚Äî –≤—ñ–π—Å—å–∫–æ–≤–∏—Ö —Ç–∞ —Ü–∏–≤—ñ–ª—å–Ω–∏—Ö, "
        f"—è–∫—ñ –∑–∞–≥–∏–Ω—É–ª–∏ –≤–Ω–∞—Å–ª—ñ–¥–æ–∫ –∑–±—Ä–æ–π–Ω–æ—ó –∞–≥—Ä–µ—Å—ñ—ó –†–æ—Å—ñ–π—Å—å–∫–æ—ó –§–µ–¥–µ—Ä–∞—Ü—ñ—ó –ø—Ä–æ—Ç–∏ –£–∫—Ä–∞—ó–Ω–∏.\n\n"
        f"–í—ñ—á–Ω–∞ —Å–ª–∞–≤–∞ –ì–µ—Ä–æ—è–º! üá∫üá¶\n\n"
        f"üìÖ –°—å–æ–≥–æ–¥–Ω—ñ ‚Äî {days_since_invasion}-–π –¥–µ–Ω—å –ø–æ–≤–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ –≤—Ç–æ—Ä–≥–Ω–µ–Ω–Ω—è.\n"
        f"üìÖ –ú–∏–Ω—É–ª–æ {days_since_crimea} –¥–Ω—ñ–≤ –∑ –º–æ–º–µ–Ω—Ç—É –æ–∫—É–ø–∞—Ü—ñ—ó –ö—Ä–∏–º—É."
    )

    await bot.send_message(chat_id=CHAT_ID, text=message)
    logging.info("–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Ö–≤–∏–ª–∏–Ω—É –º–æ–≤—á–∞–Ω–Ω—è")

async def check_air_alerts():
    global last_alert_status
    try:
        r = requests.get("https://alerts.com.ua/api/states/14", timeout=10)
        if r.status_code == 200 and r.text.strip():
            data = r.json()
            status = data.get("alert")

            if last_alert_status != status:
                last_alert_status = status
                if status:
                    await bot.send_message(
                        chat_id=CHAT_ID,
                        text=(
                            "üö® *–£–≤–∞–≥–∞! –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ —É –õ—å–≤—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ!*\n\n"
                            "–ü—Ä–æ—Å–∏–º–æ –≤—Å—ñ—Ö –Ω–µ–≥–∞–π–Ω–æ –ø—Ä–æ–π—Ç–∏ –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ —É–∫—Ä–∏—Ç—Ç—è.\n"
                            "–î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å –ø—Ä–∞–≤–∏–ª –±–µ–∑–ø–µ–∫–∏ —Ç–∞ –Ω–µ –Ω–µ—Ö—Ç—É–π—Ç–µ —Å–∏–≥–Ω–∞–ª–∞–º–∏ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è.\n\n"
                            "–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ! üá∫üá¶"
                        ),
                        parse_mode='Markdown'
                    )
                    logging.info("–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≤—ñ—Ç—Ä—è–Ω—É —Ç—Ä–∏–≤–æ–≥—É")
                else:
                    await bot.send_message(
                        chat_id=CHAT_ID,
                        text=(
                            "‚úÖ *–í—ñ–¥–±—ñ–π –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ —É –õ—å–≤—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ!*\n\n"
                            "–ù–∞—Ä–∞–∑—ñ –∑–∞–≥—Ä–æ–∑–∞ –∑ –ø–æ–≤—ñ—Ç—Ä—è –≤—ñ–¥—Å—É—Ç–Ω—è.\n"
                            "–î—è–∫—É—î–º–æ –≤—Å—ñ–º –∑–∞ –ø–∏–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ –¥–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—Ö–æ–¥—ñ–≤ –±–µ–∑–ø–µ–∫–∏.\n\n"
                            "–†–∞–∑–æ–º –¥–æ –ø–µ—Ä–µ–º–æ–≥–∏! üíôüíõ"
                        ),
                        parse_mode='Markdown'
                    )
                    logging.info("–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏")
        else:
            logging.warning(f"–ü–æ–º–∏–ª–∫–∞ API –∞–±–æ –ø—É—Å—Ç–∏–π –≤–º—ñ—Å—Ç, status_code={r.status_code}")
    except Exception as e:
        logging.error(f"[–ü–û–ú–ò–õ–ö–ê] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–∏–≤–æ–≥–∏: {e}", exc_info=True)

async def check_air_alerts_wrapper():
    await check_air_alerts()

async def main():
    logging.basicConfig(level=logging.INFO)
    scheduler = AsyncIOScheduler(timezone="Europe/Kyiv")

    scheduler.add_job(send_minute_of_silence, 'cron', hour=9, minute=00)
    scheduler.add_job(check_air_alerts_wrapper, 'interval', seconds=60)

    scheduler.start()
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")

    try:
        while True:
            await asyncio.sleep(60)
    except (KeyboardInterrupt, SystemExit):
        scheduler.shutdown()
        logging.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")

if __name__ == '__main__':
    asyncio.run(main())
