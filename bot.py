import asyncio
import datetime
import logging
import os
import requests
from collections import defaultdict
from telegram import ReplyKeyboardMarkup, Update, Bot
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiohttp import web

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))

bot = Bot(token=BOT_TOKEN)
command_usage = defaultdict(lambda: [None, 0])
last_alert_status = None

async def send_startup_notification():
    message = (
        "üá∫üá¶ *–®–∞–Ω–æ–≤–Ω—ñ –º–µ—à–∫–∞–Ω—Ü—ñ –ß–µ—Ä–≤–æ–Ω–æ–≥—Ä–∞–¥–∞ —Ç–∞ –®–µ–ø—Ç–∏—Ü—å–∫–æ–≥–æ!*\n\n"
        "–†–∞–¥—ñ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏, —â–æ –Ω–∞—à Telegram-–±–æ—Ç –ø—Ä–∞—Ü—é—î –¥–ª—è –≤–∞—Å —Ü—ñ–ª–æ–¥–æ–±–æ–≤–æ —Ç–∞ –¥–æ–ø–æ–º–∞–≥–∞—î –±—É—Ç–∏ –≤ –∫—É—Ä—Å—ñ –≤–∞–∂–ª–∏–≤–∏—Ö –ø–æ–¥—ñ–π.\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üîî *–û—Å–Ω–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞:*\n"
        "‚Ä¢ üõë –û–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≤—ñ—Ç—Ä—è–Ω—É —Ç—Ä–∏–≤–æ–≥—É —É –õ—å–≤—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ\n"
        "‚Ä¢ üïØÔ∏è –©–æ–¥–µ–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –æ 09:00 ‚Äî –í—Å–µ—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Ö–≤–∏–ª–∏–Ω–∞ –º–æ–≤—á–∞–Ω–Ω—è\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üÜï *–ù–û–í–ò–ô –§–£–ù–ö–¶–Ü–û–ù–ê–õ:*\n"
        "–ö–æ–º–∞–Ω–¥–∞ /rozklad —Ç–µ–ø–µ—Ä –Ω–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–æ—Ç–∫—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é —É —á–∞—Ç, –∞ –¥–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∑ –≤–∏–±–æ—Ä–æ–º –Ω–∞–ø—Ä—è–º–∫—É –º–∞—Ä—à—Ä—É—Ç–æ–∫ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É –≤–∞—à—ñ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n"
        "‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –æ–±–º–µ–∂–µ–Ω–æ –¥–æ 2 —Ä–∞–∑—ñ–≤ –Ω–∞ –¥–µ–Ω—å –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üí° *–ü–æ—Ä–∞–¥–∞:*\n"
        "–ù–∞–ø–∏—à—ñ—Ç—å –±–æ—Ç—É –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –æ—Å–æ–±–∏—Å—Ç—ñ, —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —Ç–∞ —Ä–æ–∑–∫–ª–∞–¥ –º–∞—Ä—à—Ä—É—Ç–æ–∫ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º.\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "–ó –ø–æ–≤–∞–≥–æ—é,\n"
        "*–í–∞—à –ø–æ–º—ñ—á–Ω–∏–∫ –∑ –±–µ–∑–ø–µ–∫–∏ —Ç–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É üíôüíõ*"
    )
    await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="Markdown")

async def send_minute_of_silence():
    now = datetime.datetime.now()
    invasion_start = datetime.datetime(2022, 2, 24)
    days_since_invasion = (now - invasion_start).days + 1
    crimea_occupation_start = datetime.datetime(2014, 2, 20)
    days_since_crimea = (now - crimea_occupation_start).days + 1
    message = (
        f"üïØÔ∏è {now.strftime('%d.%m.%Y')} –æ 09:00 ‚Äî –í—Å–µ—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Ö–≤–∏–ª–∏–Ω–∞ –º–æ–≤—á–∞–Ω–Ω—è.\n\n"
        f"–£ —Ü–µ–π —á–∞—Å –≤—à–∞–Ω–æ–≤—É—î–º–æ –ø–∞–º º—è—Ç—å —É—Å—ñ—Ö –≥—Ä–æ–º–∞–¥—è–Ω –£–∫—Ä–∞—ó–Ω–∏ ‚Äî –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤ —Ç–∞ —Ü–∏–≤—ñ–ª—å–Ω–∏—Ö, —è–∫—ñ —Ç—Ä–∞–≥—ñ—á–Ω–æ –∑–∞–≥–∏–Ω—É–ª–∏ "
        f"–≤–Ω–∞—Å–ª—ñ–¥–æ–∫ –∑–±—Ä–æ–π–Ω–æ—ó –∞–≥—Ä–µ—Å—ñ—ó –†–æ—Å—ñ–π—Å—å–∫–æ—ó –§–µ–¥–µ—Ä–∞—Ü—ñ—ó –ø—Ä–æ—Ç–∏ –£–∫—Ä–∞—ó–Ω–∏.\n\n"
        f"–°–≤—ñ—Ç–ª–∞ –ø–∞–º º—è—Ç—å –ø–æ–ª–µ–≥–ª–∏–º. –ß–µ—Å—Ç—å —ñ —Å–ª–∞–≤–∞ –ì–µ—Ä–æ—è–º! üá∫üá¶\n\n"
        f"üìÖ –°—å–æ–≥–æ–¥–Ω—ñ ‚Äî {days_since_invasion}-–π –¥–µ–Ω—å –≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É –ø–æ–≤–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ –≤—Ç–æ—Ä–≥–Ω–µ–Ω–Ω—è.\n"
        f"üìÖ –ú–∏–Ω—É–ª–æ {days_since_crimea} –¥–Ω—ñ–≤ –∑ –º–æ–º–µ–Ω—Ç—É –ø–æ—á–∞—Ç–∫—É —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –æ–∫—É–ø–∞—Ü—ñ—ó –ê–≤—Ç–æ–Ω–æ–º–Ω–æ—ó –†–µ—Å–ø—É–±–ª—ñ–∫–∏ –ö—Ä–∏–º."
    )
    await bot.send_message(chat_id=CHAT_ID, text=message)

async def check_air_alerts():
    global last_alert_status
    try:
        r = requests.get("https://alerts.com.ua/api/states", timeout=10)
        if r.status_code == 200:
            states = r.json().get("states", [])
            lviv = next((r for r in states if r["id"] == 12), None)
            if lviv:
                status = lviv.get("alert", False)
                if last_alert_status != status:
                    last_alert_status = status
                    if status:
                        text = (
                            "üö® *–£–≤–∞–≥–∞! –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ —É –õ—å–≤—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ!*\n\n"
                            "üî¥ –ó–∞–ª–∏—à–∞–π—Ç–µ—Å—å —É –±–µ–∑–ø–µ—á–Ω–æ–º—É –º—ñ—Å—Ü—ñ –∞–±–æ –Ω–µ–≥–∞–π–Ω–æ –ø—Ä—è–º—É–π—Ç–µ –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ —É–∫—Ä–∏—Ç—Ç—è.\n"
                            "‚ùó –î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å –ø—Ä–∞–≤–∏–ª –±–µ–∑–ø–µ–∫–∏, –Ω–µ —ñ–≥–Ω–æ—Ä—É–π—Ç–µ —Å–∏–≥–Ω–∞–ª–∏ —Ç—Ä–∏–≤–æ–≥–∏.\n"
                            "üì¢ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–∏—Ç—É–∞—Ü—ñ—é —É—Ç–æ—á–Ω—é–π—Ç–µ –≤ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª–∞—Ö.\n\n"
                            "–†–∞–∑–æ–º –≤–∏—Å—Ç–æ—ó–º–æ. –°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ! üá∫üá¶"
                        )
                    else:
                        text = (
                            "‚úÖ *–í—ñ–¥–±—ñ–π –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ —É –õ—å–≤—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ!*\n\n"
                            "‚òÄÔ∏è –ù–∞—Ä–∞–∑—ñ –∑–∞–≥—Ä–æ–∑–∞ –∑ –ø–æ–≤—ñ—Ç—Ä—è –≤—ñ–¥—Å—É—Ç–Ω—è. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –∑–≤–∏—á–Ω–∏—Ö —Å–ø—Ä–∞–≤.\n"
                            "üôè –î—è–∫—É—î–º–æ –≤—Å—ñ–º –∑–∞ –ø–∏–ª—å–Ω—ñ—Å—Ç—å, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ –¥–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –±–µ–∑–ø–µ–∫–∏.\n\n"
                            "–†–∞–∑–æ–º –¥–æ –ø–µ—Ä–µ–º–æ–≥–∏! üíôüíõ"
                        )
                    await bot.send_message(chat_id=CHAT_ID, text=text, parse_mode='Markdown')
    except Exception as e:
        logging.error(f"[–ü–û–ú–ò–õ–ö–ê] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–∏–≤–æ–≥–∏: {e}", exc_info=True)

async def handle(request):
    return web.Response(text="Bot is running")

async def start_web():
    app = web.Application()
    app.add_routes([web.get('/', handle)])
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.getenv("PORT", 8000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    while True:
        await asyncio.sleep(3600)

async def rozklad_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    # –Ø–∫—â–æ –∫–æ–º–∞–Ω–¥–∞ –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –Ω–µ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö ‚Äî –≤–≤—ñ—á–ª–∏–≤–æ –Ω–∞–≥–∞–¥–∞—î–º–æ
    if update.effective_chat.type != "private":
        await context.bot.send_message(
            chat_id=chat_id,
            text=(
                "‚ÑπÔ∏è –©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –º–∞—Ä—à—Ä—É—Ç–æ–∫, –Ω–∞–ø–∏—à—ñ—Ç—å –±–æ—Ç—É –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ü§ñ\n\n"
                "–¶—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É —á–∞—Ç—ñ –∑ –±–æ—Ç–æ–º ‚Äî —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —â–æ–± –≤—ñ–Ω –º—ñ–≥ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤–∞–º —Ä–æ–∑–∫–ª–∞–¥."
            )
        )
        return

    # –ö–æ—Ä–æ—Ç–∫–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è
    await context.bot.send_message(
        chat_id=chat_id,
        text=(
            "‚úÖ –í–∏ –∑–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ —Ä–æ–∑–∫–ª–∞–¥—É –º–∞—Ä—à—Ä—É—Ç–æ–∫.\n\n"
            "üì© –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —Ç–∞ –≤–∏–±—ñ—Ä –Ω–∞–ø—Ä—è–º–∫—É –±—É–¥—É—Ç—å —É —Ü—å–æ–º—É —á–∞—Ç—ñ."
        )
    )

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–º–µ–∂–µ–Ω—å (2 —Ä–∞–∑–∏/–¥–µ–Ω—å)
    today = datetime.date.today()
    last_date, count = command_usage[user_id]
    if last_date != today:
        command_usage[user_id] = [today, 1]
    elif count >= 2:
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ö†Ô∏è –í–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É 2 —Ä–∞–∑–∏ —Å—å–æ–≥–æ–¥–Ω—ñ.\n–ó–∞–≤—ñ—Ç–∞–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ üïí"
        )
        return
    else:
        command_usage[user_id][1] += 1

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –≤–∏–±–æ—Ä–æ–º
    keyboard = [["üöç –®–µ–ø—Ç–∏—Ü—å–∫–∏–π ‚Üí –õ—å–≤—ñ–≤"], ["üöç –õ—å–≤—ñ–≤ ‚Üí –®–µ–ø—Ç–∏—Ü—å–∫–∏–π"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    try:
        await context.bot.send_message(
            chat_id=chat_id,
            text="üöå –í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º–æ–∫ –º–∞—Ä—à—Ä—É—Ç–∫–∏, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥:",
            reply_markup=reply_markup
        )
    except Exception:
        await context.bot.send_message(
            chat_id=chat_id,
            text=(
                "‚ö†Ô∏è –©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–ø–∏—à—ñ—Ç—å –±–æ—Ç—É —Ö–æ—á–∞ –± –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –æ—Å–æ–±–∏—Å—Ç—ñ.\n"
                "Telegram –Ω–µ –¥–æ–∑–≤–æ–ª—è—î –±–æ—Ç–∞–º –ø–æ—á–∏–Ω–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥ –ø–µ—Ä—à–∏–º–∏."
            )
        )


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üöç –®–µ–ø—Ç–∏—Ü—å–∫–∏–π ‚Üí –õ—å–≤—ñ–≤":
        schedule = ["05:50", "06:05", "06:15", "06:37", "06:49", "07:10", "07:37", "08:09",
            "08:41", "09:04", "09:37", "09:53", "10:15", "10:25", "10:41", "11:13",
            "11:37", "12:09", "12:41", "12:57", "13:29", "14:01", "14:41", "15:15",
            "15:29", "15:45", "16:09", "16:37", "16:57", "17:25", "17:37", "18:01",
            "19:01", "19:40", "21:00"]
        direction = "–®–µ–ø—Ç–∏—Ü—å–∫–∏–π ‚Üí –õ—å–≤—ñ–≤"
    elif text == "üöç –õ—å–≤—ñ–≤ ‚Üí –®–µ–ø—Ç–∏—Ü—å–∫–∏–π":
        schedule = ["06:00", "06:15", "06:50", "06:50", "07:10", "07:30", "07:40", "08:00",
            "08:30", "09:00", "09:32", "10:04", "10:20", "10:25", "11:32", "12:00",
            "12:04", "12:36", "12:52", "13:10", "13:24", "13:30", "13:40", "13:55",
            "14:12", "14:28", "14:30", "14:52", "15:16", "15:48", "15:50", "16:20",
            "17:00", "17:14", "17:24", "17:30", "18:18", "18:32", "18:52", "19:15",
            "20:05", "20:15", "20:50"]
        direction = "–õ—å–≤—ñ–≤ ‚Üí –®–µ–ø—Ç–∏—Ü—å–∫–∏–π"
    else:
        return
    times = "\n".join([f"üïí {t}" for t in schedule])
    await update.message.reply_text(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä—è–º–æ–∫: {direction}\n\nüöå –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:\n{times}")

async def main():
    logging.basicConfig(level=logging.INFO)
    scheduler = AsyncIOScheduler(timezone="Europe/Kyiv")
    scheduler.add_job(send_minute_of_silence, 'cron', hour=9, minute=0)
    scheduler.add_job(check_air_alerts, 'interval', seconds=60)
    scheduler.start()
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("rozklad", rozklad_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    asyncio.create_task(start_web())
    asyncio.create_task(send_startup_notification())
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    await application.run_polling()

if __name__ == '__main__':
    import asyncio

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        print("‚ùå –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É")
    finally:
        loop.close()

