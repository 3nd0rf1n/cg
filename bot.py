import asyncio
import datetime
import logging
import os
import requests
from collections import defaultdict
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiohttp import web

BOT_TOKEN = os.getenv("BOT_TOKEN", "7450692138:AAHiERBibay9XI56FhpSwFFclfKZmZNWoVM")
CHAT_ID = int(os.getenv("CHAT_ID", "-1001383482902"))

bot = Bot(token=BOT_TOKEN)
last_alert_status = None
waiting_for_schedule_choice = set()
command_usage = defaultdict(lambda: [None, 0])

async def send_startup_notification():
    message = (
        "üá∫üá¶ *–®–∞–Ω–æ–≤–Ω—ñ –º–µ—à–∫–∞–Ω—Ü—ñ –ß–µ—Ä–≤–æ–Ω–æ–≥—Ä–∞–¥–∞ —Ç–∞ –®–µ–ø—Ç–∏—Ü—å–∫–æ–≥–æ!*\n\n"
        "–ó —Ä–∞–¥—ñ—Å—Ç—é –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ, —â–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–π Telegram-–±–æ—Ç *–ø—Ä–∞—Ü—é—î –¥–ª—è –≤–∞—Å —Ü—ñ–ª–æ–¥–æ–±–æ–≤–æ* üí™\n"
        "–ô–æ–≥–æ –º–µ—Ç–∞ ‚Äî –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –±—É—Ç–∏ –≤ –∫—É—Ä—Å—ñ –≤–∞–∂–ª–∏–≤–∏—Ö –ø–æ–¥—ñ–π —Ç–∞ –∑–º—ñ–Ω.\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üîî *–û—Å–Ω–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞:*\n"
        "‚Ä¢ üõë _–û–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≤—ñ—Ç—Ä—è–Ω—É —Ç—Ä–∏–≤–æ–≥—É —É –õ—å–≤—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ_\n"
        "‚Ä¢ üïØÔ∏è _–©–æ–¥–µ–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –æ 09:00 ‚Äî –í—Å–µ—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Ö–≤–∏–ª–∏–Ω–∞ –º–æ–≤—á–∞–Ω–Ω—è_\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üÜï *–ù–û–í–ê –ú–û–ñ–õ–ò–í–Ü–°–¢–¨:*\n"
        "–ö–æ–º–∞–Ω–¥–∞ /rozklad ‚Äî –≤—ñ–¥–∫—Ä–∏–≤–∞—î —Ä–æ–∑–∫–ª–∞–¥ –º–∞—Ä—à—Ä—É—Ç–æ–∫ –º—ñ–∂ –®–µ–ø—Ç–∏—Ü—å–∫–∏–º —Ç–∞ –õ—å–≤–æ–≤–æ–º üöå\n"
        "‚ö†Ô∏è _–û–±–º–µ–∂–µ–Ω–Ω—è: –Ω–µ –±—ñ–ª—å—à–µ 2 —Ä–∞–∑—ñ–≤ –Ω–∞ –¥–µ–Ω—å, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è_\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üí° *–ü–æ—Ä–∞–¥–∞:*\n"
        "–î–æ–¥–∞–π—Ç–µ —Ü—å–æ–≥–æ –±–æ—Ç–∞ –≤ ¬´–û–±—Ä–∞–Ω–µ¬ª —Ç–∞ —É–≤—ñ–º–∫–Ω—ñ—Ç—å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, —â–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≤–∞–∂–ª–∏–≤–µ\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "–ó –ø–æ–≤–∞–≥–æ—é,\n"
        "*–í–∞—à –ø–æ–º—ñ—á–Ω–∏–∫ –∑ –±–µ–∑–ø–µ–∫–∏ —Ç–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É üíôüíõ*"
    )
    await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="Markdown")

async def send_minute_of_silence():
    now = datetime.datetime.now()
    invasion_start = datetime.datetime(2022, 2, 24)
    days_since_invasion = (now - invasion_start).days + 1
    crimea_occupation_start = datetime.datetime(2014, 2, 20)
    days_since_crimea = (now - crimea_occupation_start).days + 1
    message = (
        f"üïØÔ∏è {now.strftime('%d.%m.%Y')} –æ 09:00 ‚Äî –í—Å–µ—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Ö–≤–∏–ª–∏–Ω–∞ –º–æ–≤—á–∞–Ω–Ω—è.\n\n"
        f"–£ —Ü–µ–π —á–∞—Å –≤—à–∞–Ω–æ–≤—É—î–º–æ –ø–∞–º º—è—Ç—å —É—Å—ñ—Ö –≥—Ä–æ–º–∞–¥—è–Ω –£–∫—Ä–∞—ó–Ω–∏ ‚Äî –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤ —Ç–∞ —Ü–∏–≤—ñ–ª—å–Ω–∏—Ö, "
        f"—è–∫—ñ —Ç—Ä–∞–≥—ñ—á–Ω–æ –∑–∞–≥–∏–Ω—É–ª–∏ –≤–Ω–∞—Å–ª—ñ–¥–æ–∫ –∑–±—Ä–æ–π–Ω–æ—ó –∞–≥—Ä–µ—Å—ñ—ó –†–æ—Å—ñ–π—Å—å–∫–æ—ó –§–µ–¥–µ—Ä–∞—Ü—ñ—ó –ø—Ä–æ—Ç–∏ –£–∫—Ä–∞—ó–Ω–∏.\n\n"
        f"–°–≤—ñ—Ç–ª–∞ –ø–∞–º º—è—Ç—å –ø–æ–ª–µ–≥–ª–∏–º. –ß–µ—Å—Ç—å —ñ —Å–ª–∞–≤–∞ –ì–µ—Ä–æ—è–º! üá∫üá¶\n\n"
        f"üìÖ –°—å–æ–≥–æ–¥–Ω—ñ ‚Äî {days_since_invasion}-–π –¥–µ–Ω—å –≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É –ø–æ–≤–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ –≤—Ç–æ—Ä–≥–Ω–µ–Ω–Ω—è.\n"
        f"üìÖ –ú–∏–Ω—É–ª–æ {days_since_crimea} –¥–Ω—ñ–≤ –∑ –º–æ–º–µ–Ω—Ç—É –ø–æ—á–∞—Ç–∫—É —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –æ–∫—É–ø–∞—Ü—ñ—ó –ê–≤—Ç–æ–Ω–æ–º–Ω–æ—ó –†–µ—Å–ø—É–±–ª—ñ–∫–∏ –ö—Ä–∏–º."
    )
    await bot.send_message(chat_id=CHAT_ID, text=message)

async def check_air_alerts():
    global last_alert_status
    try:
        r = requests.get("https://alerts.com.ua/api/states", timeout=10)
        if r.status_code == 200 and r.text.strip():
            data = r.json()
            states = data.get("states", [])
            lviv = next((region for region in states if region["id"] == 12), None)
            if lviv:
                status = lviv.get("alert", False)
                if last_alert_status != status:
                    last_alert_status = status
                    if status:
                        await bot.send_message(
                            chat_id=CHAT_ID,
                            text=(
                                "üö® *–£–≤–∞–≥–∞! –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ —É –õ—å–≤—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ!*\n\n"
                                "–ü—Ä–æ—Å–∏–º–æ –≤—Å—ñ—Ö –Ω–µ–≥–∞–π–Ω–æ –ø—Ä–æ–π—Ç–∏ –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ —É–∫—Ä–∏—Ç—Ç—è.\n"
                                "–î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å –ø—Ä–∞–≤–∏–ª –±–µ–∑–ø–µ–∫–∏ —Ç–∞ –Ω–µ –Ω–µ—Ö—Ç—É–π—Ç–µ —Å–∏–≥–Ω–∞–ª–∞–º–∏ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è.\n\n"
                                "–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ! üá∫üá¶"
                            ),
                            parse_mode='Markdown'
                        )
                    else:
                        await bot.send_message(
                            chat_id=CHAT_ID,
                            text=(
                                "‚úÖ *–í—ñ–¥–±—ñ–π –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ —É –õ—å–≤—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ!*\n\n"
                                "–ù–∞—Ä–∞–∑—ñ –∑–∞–≥—Ä–æ–∑–∞ –∑ –ø–æ–≤—ñ—Ç—Ä—è –≤—ñ–¥—Å—É—Ç–Ω—è.\n"
                                "–î—è–∫—É—î–º–æ –≤—Å—ñ–º –∑–∞ –ø–∏–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ –¥–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—Ö–æ–¥—ñ–≤ –±–µ–∑–ø–µ–∫–∏.\n\n"
                                "–†–∞–∑–æ–º –¥–æ –ø–µ—Ä–µ–º–æ–≥–∏! üíôüíõ"
                            ),
                            parse_mode='Markdown'
                        )
    except Exception as e:
        logging.error(f"[–ü–û–ú–ò–õ–ö–ê] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–∏–≤–æ–≥–∏: {e}", exc_info=True)

async def check_air_alerts_wrapper():
    await check_air_alerts()

async def handle(request):
    return web.Response(text="Bot is running")

async def start_http_server():
    app = web.Application()
    app.add_routes([web.get('/', handle)])
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8000)
    await site.start()
    while True:
        await asyncio.sleep(3600)

async def send_schedule_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    today = datetime.date.today()
    last_date, count = command_usage[user_id]
    if last_date != today:
        command_usage[user_id] = [today, 1]
    else:
        if count >= 2:
            await update.message.reply_text("‚ö†Ô∏è –í–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É 2 —Ä–∞–∑–∏ —Å—å–æ–≥–æ–¥–Ω—ñ.")
            return
        command_usage[user_id][1] += 1
    keyboard = [["üöç –®–µ–ø—Ç–∏—Ü—å–∫–∏–π ‚Üí –õ—å–≤—ñ–≤"], ["üöç –õ—å–≤—ñ–≤ ‚Üí –®–µ–ø—Ç–∏—Ü—å–∫–∏–π"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    waiting_for_schedule_choice.add(update.message.chat_id)
    await update.message.reply_text("üöå –û–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º–æ–∫:", reply_markup=reply_markup)

async def handle_schedule_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    if chat_id not in waiting_for_schedule_choice:
        return
    waiting_for_schedule_choice.remove(chat_id)
    text = update.message.text
    waiting_message = await update.message.reply_text("‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ, —à—É–∫–∞—é —Ä–æ–∑–∫–ª–∞–¥‚Ä¶")
    await asyncio.sleep(2)
    await context.bot.delete_message(chat_id=chat_id, message_id=waiting_message.message_id)
    if text == "üöç –®–µ–ø—Ç–∏—Ü—å–∫–∏–π ‚Üí –õ—å–≤—ñ–≤":
        schedule = [
            "05:50", "06:05", "06:15", "06:37", "06:49", "07:10", "07:37", "08:09", "08:41", "09:04",
            "09:37", "09:53", "10:15", "10:25", "10:41", "11:13", "11:37", "12:09", "12:41", "12:57",
            "13:29", "14:01", "14:41", "15:15", "15:29", "15:45", "16:09", "16:37", "16:57", "17:25",
            "17:37", "18:01", "19:01", "19:40", "21:00"
        ]
        direction = "–®–µ–ø—Ç–∏—Ü—å–∫–∏–π ‚Üí –õ—å–≤—ñ–≤"
    elif text == "üöç –õ—å–≤—ñ–≤ ‚Üí –®–µ–ø—Ç–∏—Ü—å–∫–∏–π":
        schedule = [
            "06:00", "06:15", "06:50", "06:50", "07:10", "07:30", "07:40", "08:00", "08:30", "09:00",
            "09:32", "10:04", "10:20", "10:25", "11:32", "12:00", "12:04", "12:36", "12:52", "13:10",
            "13:24", "13:30", "13:40", "13:55", "14:12", "14:28", "14:30", "14:52", "15:16", "15:48",
            "15:50", "16:20", "17:00", "17:14", "17:24", "17:30", "18:18", "18:32", "18:52", "19:15",
            "20:05", "20:15", "20:50"
        ]
        direction = "–õ—å–≤—ñ–≤ ‚Üí –®–µ–ø—Ç–∏—Ü—å–∫–∏–π"
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∏–±—ñ—Ä.", reply_markup=ReplyKeyboardRemove())
        return
    lines = [f"üïí {time}" for time in schedule]
    cols = 5
    rows = [lines[i:i+cols] for i in range(0, len(lines), cols)]
    response = "\n".join(["    ".join(row) for row in rows])
    await update.message.reply_text(
        f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä—è–º–æ–∫: üöç {direction}\n\nüöå –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:\n{response}",
        reply_markup=ReplyKeyboardRemove()
    )

async def main():
    logging.basicConfig(level=logging.INFO)
    scheduler = AsyncIOScheduler(timezone="Europe/Kyiv")
    scheduler.add_job(send_minute_of_silence, 'cron', hour=9, minute=0)
    scheduler.add_job(check_air_alerts_wrapper, 'interval', seconds=60)
    scheduler.start()
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("rozklad", send_schedule_buttons))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_schedule_choice))
    await application.initialize()
    await application.start()
    await send_startup_notification()
    http_task = asyncio.create_task(start_http_server())
    polling_task = asyncio.create_task(application.updater.start_polling())
    await asyncio.gather(http_task, polling_task)

if __name__ == '__main__':
    asyncio.run(main())
